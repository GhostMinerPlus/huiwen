(()=>{"use strict";const n={__init:async()=>{}},e={add:{fn:async n=>(new Number(n[0])+new Number(n[1])).toString(),len:2},minus:{fn:async n=>(new Number(n[0])-new Number(n[1])).toString(),len:2},mul:{fn:async n=>(new Number(n[0])*new Number(n[1])).toString(),len:2},div:{fn:async n=>(new Number(n[0])/new Number(n[1])).toString(),len:2},fact:{fn:async n=>(new Number(n[0])%new Number(n[1])).toString(),len:2},g:{fn:async n=>(new Number(n[0])>new Number(n[1])).toString(),len:2},s:{fn:async n=>(new Number(n[0])<new Number(n[1])).toString(),len:2},eq:{fn:async n=>(n[0]===n[1]).toString(),len:2},ne:{fn:async n=>(n[0]!==n[1]).toString(),len:2},ge:{fn:async n=>(new Number(n[0])>=new Number(n[1])).toString(),len:2},se:{fn:async n=>(new Number(n[0])>=new Number(n[1])).toString(),len:2},split:{fn:async n=>{const e=n[0].split(n[1]);let t={};for(let n=0;n<e.length;n+=1)t[n]=e[n];return t},len:2},for:{fn:async n=>{const t=n[0];let r=null;const a=new Number(await e.len.fn([t]));for(let n=0;n<a;n+=1)r=await(void 0).execute(t[n]);return r},len:1},len:{fn:async n=>{const e=n[0];return Object.keys(e).len().toString()},len:1},rand:{fn:async n=>Math.random().toString(),len:1},match:{fn:async n=>{let t=n[0];const r=n[1],a=t.split("<:>"),i=e[a[0]];if(i){let n;return 2===a.length?(n=JSON.parse(a[1]),n.push(r)):n=[r],i.len===n.length?await i.fn(n):`${a[0]}<:>${JSON.stringify(n)}`}throw new Error("what fuck")},len:2}},t={__init:async()=>{await n.__init()},__release:async()=>{await n.__release()},match:async(n,t)=>e.match.fn([n,t])},r=async(n,e)=>{if("string"==typeof n){let t=0,r=(n=n.replace(/\$\{0\}/g,e)).indexOf("${");for(;r>0;){t+=r+2;const e=n.substring(t).indexOf("}"),a=new Number(n.substring(t,t+e));r=(n=n.substring(0,t)+new String(a-1)+n.substring(t+e)).substring(t).indexOf("${")}return n}return n=await r(JSON.stringify(n),e),JSON.parse(n)},a={__init:async n=>{a.__api=n},__release:async()=>{await a.__api.__release()},execute:async(n,e="",t=0)=>{if("string"==typeof n)return n.startsWith("[")?JSON.stringify(n):n;if(0===t){if(void 0===n.length)return n;e=await a.execute(n[0])}else{let i=await a.execute(n[t]);e=await a.execute(await(async(n,e)=>"string"!=typeof n?(n=n[e]||n["?"],await r(n,e)):(n=await a.__api.match(n,e),await r(n,e)))(e,i))}return(t+=1)>=n.length?e:await a.execute(n,e,t)}},i=a;(async()=>{await i.__init(t),document.getElementById("root").innerText=await i.execute(["add","1","1"])})()})();